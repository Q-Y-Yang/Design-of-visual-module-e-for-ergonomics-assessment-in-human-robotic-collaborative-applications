#!/usr/bin/env python
#!coding=utf-8

import numpy as np
import math


# calculate angle between two lines
def line_angle(A1, A2, B1, B2):
	kline1 = (A2[1] - A1[1])/(A2[0] - A1[0])
	kline2 = (B2[1] - B1[1])/(B2[0] - B1[0])
	tan_k = (kline2 - kline1)/(1 + kline2 * kline1)
	arctan = math.atan(tan_k)
	angle = arctan * 180 / 3.1415926
	return angle

	#lookup table ABC
def lookup(UL,WW,N,TLE,MF1,MF2):
	#tableA = np.empty([19,9], dtype = int)
	#tableB = np.empty([7,13], dtype = int)
	#tableC = np.empty([9,8], dtype = int)

	tableA = np.array(([0,110,120,210,220,310,320,410,420],[11,1,2,2,2,2,3,3,3],[12,2,2,2,2,3,3,3,3],[13,2,3,3,3,3,3,4,4],[21,2,3,3,3,3,4,4,4],[22,3,3,3,3,3,4,4,4],[23,3,4,4,4,4,4,5,5],[31,3,3,4,4,4,4,5,5],[32,3,4,4,4,4,4,5,5],[33,4,4,4,4,4,5,5,5],[41,4,4,4,4,4,5,5,5],[42,4,4,4,4,4,5,5,5],[43,4,4,4,5,5,5,6,6],[51,5,5,5,5,5,6,6,7],[52,5,6,6,6,6,7,7,7],[53,6,6,6,7,7,7,7,8],[61,7,7,7,7,7,8,8,9],[62,8,8,8,8,8,9,9,9],[63,9,9,9,9,9,9,9,9]))

	tableB = np.array(([0,11,12,21,22,31,32,41,42,51,52,61,62],[10,1,3,2,3,3,4,5,5,6,6,7,7],[20,2,3,2,3,4,5,5,5,6,7,7,7],[30,3,3,3,4,4,5,5,6,6,7,7,7],[40,5,5,5,6,6,7,7,7,7,7,8,8],[50,7,7,7,7,7,8,8,8,8,8,8,8],[60,8,8,8,8,8,8,8,9,9,9,9,9]))

	tableC = np.array(([0,10,20,30,40,50,60,70],[100,1,2,3,3,4,5,5],[200,2,2,3,4,4,5,5],[300,3,3,3,4,4,5,6],[400,3,3,3,4,5,6,6],[500,4,4,4,5,6,7,7],[600,4,4,5,6,6,7,7],[700,5,5,6,6,7,7,7],[800,5,5,6,7,7,7,7]))
	scoreA = tableA[np.argwhere(tableA == UL)[0,0], np.argwhere(tableA == WW)[0,1]]
	scoreB = tableB[np.argwhere(tableB == N)[0,0], np.argwhere(tableB == TLE)[0,1]]
	print(scoreA, scoreB)
	WA = 0
	NLT = 0
	WA = (MF1 + scoreA)*100
	NTL = (MF2 + scoreB)*10
	if WA>800:
		WA = 800
	if NTL>70:
		NTL = 70

	scoreC = tableC[np.argwhere(tableC == WA)[0,0], np.argwhere(tableC == NTL)[0,1]]
	
	return scoreC

def main():
	#coordinates
	#data = [4.54335022e+02,   1.82294769e+02 , 8.04848909e-01, 5.06112152e+02 ,  2.10155533e+02 ,  6.09847128e-01,  4.95443604e+02  , 2.07475998e+02 ,  5.00070214e-01, 5.06079437e+02 ,  3.00376770e+02 , 1.59751445e-01, 4.80851044e+02 ,  3.25624084e+02  , 6.74008787e-01, 5.16710571e+02 ,  2.15447479e+02  , 7.25321651e-01,  5.04807007e+02 ,  3.03014282e+02 , 8.44079137e-01,  4.27800171e+02 ,  2.95111786e+02 ,  8.12976718e-01,  5.35272278e+02,   3.76018341e+02 ,  4.74166840e-01,  5.45897461e+02,  3.76001495e+02,   3.74954462e-01,  5.51185486e+02 , 4.84854431e+02,   3.17633390e-01,  0.0 ,  0.0 ,  0.0,  5.25960693e+02 ,  3.76055206e+02 ,  4.73727733e-01,  4.74253937e+02 ,  4.84872131e+02 ,  3.76045287e-01,  0.0,   0.0,   0.0,  0.0 ,  0.0,  0.0,  4.60996216e+02 ,  1.67710571e+02 ,  8.66292834e-01,  0.0 , 0.0 , 0.0,  4.92849335e+02 ,  1.61047699e+02 ,  8.90019774e-01,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0 ,0.0,0.0,0.0,0.0,0.0]
	#hand = [151.80465698,295.50640869,0.64073163,161.76905823 , 285.10876465,    0.64167237,176.93228149 , 277.74377441 ,   0.74247301,194.69493103 , 275.5776062 ,    0.82608491,208.12521362,  274.71112061 ,   0.8844223,190.36257935,  288.14141846,    0.85013592,208.12521362,  285.54202271 ,   0.86302739,220.68902588 , 285.10876465 ,   0.91600031,230.65342712 , 285.54202271 ,   0.85338199,189.49610901  ,297.6725769   ,  0.80328763,208.12521362 , 295.93963623   , 0.90003651,221.55549622  ,295.50640869,    0.85108292,231.95314026,  295.93963623 ,   0.84625143,186.896698   , 305.4708252   ,  0.84855127, 204.65933228 , 305.4708252    , 0.85154438,217.22314453 , 305.4708252,     0.93645048,227.18754578 , 305.90405273,    0.81918281,185.59698486 , 311.96936035 ,   0.77913034,199.89373779 , 312.40258789  ,  0.88423419,207.69197083 ,312.40258789, 0.97999418,214.62373352,312.40,0.0]
	#data = [64.44684600830078, 308.4743347167969, 0.7185378670692444, 124.49482727050781, 285.0414733886719, 0.6602312326431274, 124.47705078125, 337.2259216308594, 0.6645748615264893, 192.38742065429688, 390.7044982910156, 0.603653073310852, 205.43540954589844, 376.4041442871094, 0.7588886022567749, 131.0459442138672, 226.33163452148438, 0.6890155673027039, 217.16648864746094, 210.65383911132812, 0.7831953763961792, 226.3254852294922, 284.9938049316406, 0.8310027122497559, 300.6973571777344, 307.19384765625, 0.4397731125354767, 298.05999755859375, 330.7491149902344, 0.4510580599308014, 382.9230651855469, 341.1501770019531, 0.35982948541641235, 585.2077026367188, 351.59332275390625, 0.6020247340202332, 299.3856201171875, 275.8755798339844, 0.40981394052505493, 462.5185546875, 265.49114990234375, 0.4331922233104706, 589.128173828125, 268.050537109375, 0.49199560284614563, 55.303123474121094, 311.1361999511719, 0.5984821319580078, 56.63123321533203, 296.8182373046875, 0.8093903064727783, 68.3757553100586, 318.9795227050781, 0.05564950779080391, 55.33447265625, 266.78228759765625, 0.7397749423980713, 624.3826293945312, 236.75653076171875, 0.2679338753223419, 623.0961303710938, 238.0376739501953, 0.20733831822872162, 607.4165649414062, 275.8836669921875, 0.2851846218109131, 620.4326171875, 388.1480712890625, 0.2766605317592621, 620.4923095703125, 384.22314453125, 0.27706092596054077, 599.5806274414062, 343.7449645996094, 0.44133374094963074, 233.52256774902344, 285.44171142578125, 0.4245532751083374, 222.9254913330078, 295.075439453125, 0.5640636682510376, 216.8241424560547, 309.5260009765625, 0.674044132232666, 221.6409912109375, 321.4075622558594, 0.5945423245429993, 223.24661254882812, 331.0412902832031, 0.8505218625068665, 231.2747039794922, 314.6639709472656, 0.5607251524925232, 232.8803253173828, 330.72015380859375, 0.7016581296920776, 230.63246154785156, 340.67498779296875, 0.7268182039260864, 229.02684020996094, 349.0242004394531, 0.7659066319465637, 238.98167419433594, 316.26959228515625, 0.6620299220085144, 240.90841674804688, 333.6102600097656, 0.7022020816802979, 237.3760528564453, 346.4552307128906, 0.7420961260795593, 234.16482543945312, 356.4100646972656, 0.7987179160118103, 242.1929168701172, 317.8752136230469, 0.6131995916366577, 244.11965942382812, 332.3257751464844, 0.5818170309066772, 243.15628051757812, 343.88623046875, 0.6226813197135925, 242.5140380859375, 350.62982177734375, 0.6075620651245117, 241.8717803955078, 318.8385925292969, 0.4863285720348358, 243.47740173339844, 330.3990478515625, 0.4271194636821747, 242.5140380859375, 336.17926025390625, 0.40230676531791687, 242.1929168701172, 342.2806091308594, 0.3259962499141693, 207.20443725585938, 380.24676513671875, 0.26935240626335144, 211.0096435546875, 362.4891052246094, 0.15200749039649963, 213.54644775390625, 345.6827392578125, 0.17072948813438416, 213.86355590820312, 342.1946105957031, 0.5044064521789551, 213.22935485839844, 344.4143371582031, 0.05371817573904991, 198.9597930908203, 349.8050537109375, 0.6411601305007935, 203.3992156982422, 349.8050537109375, 0.13309819996356964, 212.27804565429688, 349.4879455566406, 0.1575448364019394, 213.54644775390625, 350.12213134765625, 0.18098184466362, 198.32559204101562, 359.9522705078125, 0.6987534165382385, 208.47283935546875, 355.1957702636719, 0.7308334708213806, 215.1319580078125, 355.1957702636719, 0.5718530416488647, 217.66876220703125, 355.8299560546875, 0.3701011836528778, 201.49661254882812, 368.5140075683594, 0.623314619064331, 209.42413330078125, 365.343017578125, 0.6478112936019897, 217.98587036132812, 363.75750732421875, 0.756566047668457, 218.9371795654297, 365.9772033691406, 0.5299561023712158, 209.42413330078125, 376.4415588378906, 0.43789660930633545, 211.96095275878906, 375.490234375, 0.43214285373687744, 220.83978271484375, 372.3192138671875, 0.6674379110336304, 221.15687561035156, 372.3192138671875, 0.43675437569618225]

	#data = [504.3036193847656, 162.37841796875, 0.8784765005111694, 461.2302551269531, 231.51531982421875, 0.5876801609992981, 441.64617919921875, 214.5650177001953, 0.4231807291507721, 337.2539978027344, 215.87208557128906, 0.2354830950498581, 320.31707763671875, 174.0782928466797, 0.762220561504364, 483.42431640625, 249.76876831054688, 0.6414787769317627, 377.70098876953125, 266.7841796875, 0.6595688462257385, 351.5674743652344, 162.32289123535156, 0.808316707611084, 274.58966064453125, 235.42811584472656, 0.23927004635334015, 273.28076171875, 214.579833984375, 0.2174588143825531, 119.2604751586914, 239.33909606933594, 0.07274892926216125, 0.0, 0.0, 0.0, 268.0506286621094, 247.1934051513672, 0.1588546484708786, 129.72750854492188, 247.1969757080078, 0.0666753426194191, 0.0, 0.0, 0.0, 512.1058959960938, 157.14013671875, 0.49883586168289185, 519.9465942382812, 171.5234375, 0.8932361602783203, 0.0, 0.0, 0.0, 526.4944458007812, 213.29510498046875, 0.9360985159873962, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 349.5271301269531, 157.69692993164062, 0.608234167098999, 360.9389343261719, 146.72402954101562, 0.7305794954299927, 372.7896728515625, 133.9954833984375, 0.7857306599617004, 383.7625732421875, 125.65608215332031, 0.8244946002960205, 394.2965393066406, 117.75559997558594, 0.868079662322998, 350.40496826171875, 122.14476013183594, 0.7252925634384155, 342.9433898925781, 104.588134765625, 0.8130232095718384, 341.187744140625, 93.61524200439453, 0.8441653251647949, 337.6764221191406, 83.95909881591797, 0.8980555534362793, 343.38232421875, 125.21717071533203, 0.5546390414237976, 338.9931640625, 112.04969787597656, 0.6854848265647888, 338.1153259277344, 101.0768051147461, 0.5906292796134949, 338.1153259277344, 91.85958099365234, 0.48929837346076965, 341.187744140625, 129.6063232421875, 0.3839111328125, 338.1153259277344, 119.95018005371094, 0.4821438491344452, 335.4818420410156, 111.17186737060547, 0.6482210159301758, 335.9207458496094, 102.3935546875, 0.5289131999015808, 343.38232421875, 135.7511444091797, 0.2322002351284027, 339.8710021972656, 129.6063232421875, 0.27118635177612305, 331.0926818847656, 126.09500122070312, 0.31474611163139343, 329.3370056152344, 122.58367156982422, 0.3930075466632843, 320.8557434082031, 167.56317138671875, 0.29982075095176697, 327.3665771484375, 160.66934204101562, 0.38503897190093994, 330.4305114746094, 144.96673583984375, 0.5240270495414734, 326.98358154296875, 132.3280487060547, 0.5562702417373657, 328.51556396484375, 123.5192642211914, 0.5663348436355591, 314.34490966796875, 137.30691528320312, 0.5686572790145874, 305.91912841796875, 126.58319091796875, 0.5395004749298096, 307.8340759277344, 118.92337799072266, 0.7758553624153137, 312.4299621582031, 112.41254425048828, 0.5530211925506592, 310.5150146484375, 142.66879272460938, 0.6255669593811035, 306.6850891113281, 127.73216247558594, 0.533281147480011, 321.6217346191406, 131.5620574951172, 0.2935287356376648, 326.98358154296875, 133.86000061035156, 0.3384133577346802, 309.7490234375, 146.49868774414062, 0.6138373613357544, 312.4299621582031, 133.86000061035156, 0.8643509149551392, 321.2387390136719, 135.00897216796875, 0.5034322142601013, 326.6005859375, 136.15794372558594, 0.4364611804485321, 310.13201904296875, 152.24354553222656, 0.5125246644020081, 313.1959228515625, 143.4347686767578, 0.662659764289856, 319.706787109375, 140.370849609375, 0.9991165399551392, 325.4516296386719, 140.370849609375, 0.6731612086296082]

	#datanon=[0.0, 0.0, 0.0, 290.23193359375, 140.13624572753906, 0.7757740020751953, 373.7738342285156, 150.5861053466797, 0.666426420211792, 381.5918273925781, 262.8604736328125, 0.7276337146759033, 0.0, 0.0, 0.0, 209.31813049316406, 127.11006927490234, 0.6573837399482727, 189.73988342285156, 221.0653533935547, 0.6588959097862244, 0.0, 0.0, 0.0, 275.85076904296875, 338.5298767089844, 0.4970701336860657, 316.3709716796875, 339.8558654785156, 0.4246423542499542, 298.05877685546875, 467.76800537109375, 0.5116375684738159, 0.0, 0.0, 0.0, 234.1155242919922, 334.6318359375, 0.4545905590057373, 208.03512573242188, 456.00396728515625, 0.5700404047966003, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 341.18304443359375, 50.10187530517578, 0.8168022036552429, 274.6094665527344, 47.534671783447266, 0.8615506887435913, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
	data =[0.0, 0.0, 0.0, 376.4072570800781, 120.64249420166016, 0.8029575347900391, 441.6628723144531, 129.71917724609375, 0.7380571365356445, 432.44366455078125, 213.17724609375, 0.8599562644958496, 0.0, 0.0, 0.0, 308.54766845703125, 117.92266845703125, 0.6891093254089355, 271.9713134765625, 227.62997436523438, 0.7463148236274719, 0.0, 0.0, 0.0, 358.1398010253906, 295.47833251953125, 0.5024442672729492, 392.0544128417969, 294.1659240722656, 0.477626234292984, 381.6709899902344, 405.1221923828125, 0.662202000617981, 0.0, 0.0, 0.0, 319.0132141113281, 296.7846984863281, 0.4256448745727539, 290.2777404785156, 419.4473571777344, 0.6913296580314636, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 392.0975036621094, 55.27113723754883, 0.8699161410331726, 338.52154541015625, 56.626949310302734, 0.9316926002502441, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
	# read keypoints
	keypointsarr = np.array(data).reshape(67,3)	 #2D array for a person(body(25)+two hands(21*2))
	keypoints = np.delete(keypointsarr, -1, axis=1)   #delete confidence score
	#handsarr = np.array(hand).reshape(21,3)	 #2D array for a person
	#hand = np.delete(handsarr, -1, axis=1)
	#if keypoints[8,:]==[0,0] or keypoints[1,:]==[0,0]:
	#ros error

#RULA Score
	score1 = 0
	score2 = 0
	U = 0
	L = 0
	W1 = 0
	W2 = 0
	N = 0
	T = 0
	LE = 0
	UL = 0
	WW = 0
	N = 0
	TLE = 0
	MF1 = 0
	MF2 = 0

	#side view
	#step1 upper arm
	angle11 = line_angle(keypoints[2,:], keypoints[3,:], keypoints[8,:], keypoints[1,:])  #normally from side view both shoulders can be detected.
	#angle12 = line_angle(keypoints[5], keypoints[6], keypoints[8], keypoints[1])

	#step1a shoulder raised?
	angle13 = line_angle(keypoints[2,:], keypoints[1,:],keypoints[8,:], keypoints[1,:])  

	#step2 lower arm
	angle21 = line_angle(keypoints[3,:], keypoints[4,:], keypoints[2,:], keypoints[3,:])

	#step3 wrist  also need hand points
	angle31 = line_angle(keypoints[3,:], keypoints[4,:], keypoints[4,:], keypoints[34,:])
	#step4 wrist twist
	angle41 = line_angle(keypoints[25,:], keypoints[34,:], keypoints[25,:], keypoints[27,:])
	#step9 neck
	angle91 = line_angle(keypoints[8,:], keypoints[1,:], keypoints[1,:], keypoints[17,:])

	#step10 trunk
	angle101 = abs(line_angle(keypoints[8,:],keypoints[1,:], keypoints[1,:], keypoints[1,:]+[1, 0]) - 90)

	#from top front view
	#step1a abduction of shoulder
	angle1_1 = line_angle(keypoints[2,:], keypoints[3,:], keypoints[8,:], keypoints[1,:])
	angle1_2 = line_angle(keypoints[5,:], keypoints[6,:], keypoints[8,:], keypoints[1,:])

	#step2a lower arm outside of body
	angle2_1 = line_angle(keypoints[3,:], keypoints[4,:], keypoints[8,:], keypoints[1,:])
	angle2_2 = line_angle(keypoints[6,:], keypoints[7,:], keypoints[8,:], keypoints[1,:])

	#step3a wrist bent from midline
	angle3_1 = line_angle(keypoints[3,:], keypoints[4,:],keypoints[4,:], keypoints[34,:])

	#step9a neck twist or side bent
	angle9_1 = line_angle(keypoints[0,:], keypoints[1,:], keypoints[8,:], keypoints[1,:])

	#step10 trunk side bend
	angle10_1 = abs(line_angle(keypoints[8,:],keypoints[1,:], keypoints[1,:], keypoints[1,:]+[1, 0]) - 90)

	#step10a trunk twist
	angle10_2 = line_angle(keypoints[2,:], keypoints[8,:], keypoints[5,:], keypoints[8,:])

	#step11 legs evenly-balanced
	angle11_1 = line_angle(keypoints[9,:], keypoints[10,:], keypoints[10,:], keypoints[11,:])
	angle11_2 = line_angle(keypoints[12,:], keypoints[13,:], keypoints[13,:], keypoints[14,:])
	
	#print(angle11,angle13,angle21,angle31,angle41,angle91,angle101)
	print(angle1_1,angle1_2,angle2_1,angle2_2,angle3_1,angle9_1,angle10_1,angle10_2,angle11_1,angle11_2)

	#scoring
	#step1
	if abs(angle11)<20:
		U = U+1
	elif angle11<-20 or angle11>20 and angle11<45:
		U = U+2
	elif angle11>45 and angle11<90:
		U = U+3
	elif angle11>90:
		U = U+4

	#step2 & 2a
	if angle21>80 and angle21<100:
		L = L+1
	elif angle21>100 or angle21<80 and angle21>5:
		L = L+2

	if angle2_1>5 or angle2_1<-5:
		L =  L+1
	if angle2_2>5 or angle2_2<-5:
		L =  L+1

	#step3 & 3a
	if angle31<2 or angle31>-2:
		W1 = W1+1
	elif angle31<12 or angle31>-12:
		W1 = W1+2
	elif angle31>15 or angle31<-15:
		W1 = W1+3

	if angle3_1>5 or angle3_1<-5:
		W1 = W1+1

	#step4
	if angle41>30:
		W2 =  W2+1
	else:
		W2 = W2+2

	#step9 & 9a
	if angle91>0 and angle91<10:
		N = N+1
	elif angle91>10 and angle91<20:
		N = N+2
	elif angle91>20:
		N =N+3
	elif angle91<0:
		N = N+4

	if angle9_1>5 or angle9_1<-5:
		N = N+1

	#step10 & 10a
	if angle101==0:
		T = T+1
	elif angle101>0 and angle101<20:
		T = T+2
	elif angle101>20 and angle101<60:
		T = T+3
	elif angle101>60:
		T = T+4

	if angle10_2<30:
		T =  T+1

	#step11 
	if angle11_1>170 and angle11_2>170:
		LE = LE+1
	else: LE = LE+2
	#tableA = np.zeros([19,9], dtype = int)
	#tableB = np.empty([7,13], dtype = int)
	#tableC = np.empty([9,8], dtype = int)
	#lookup table A
	UL = U*10 + L
	WW = W1*100 + W2*10
	N = N*10
	TLE = T*10 + LE
	MF1 = 1
	MF2 = 1

	#risklevel = lookup(UL,WW,N,TLE,MF1,MF2)
	#print(risklevel,U,L,W1,W2,N/10,T,LE)

if __name__ == '__main__':
    main()
